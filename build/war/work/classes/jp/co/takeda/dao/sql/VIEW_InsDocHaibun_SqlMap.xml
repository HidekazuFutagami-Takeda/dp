<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="VIEW_InsDocHaibun_SqlMap">
<resultMap id="resultMapList" class="java.util.HashMap">
  <result column="SOS_CD" property="SOS_CD" jdbcType="VARCHAR" />
  <result column="JGI_NO" property="JGI_NO" jdbcType="INTEGER" />
  <result column="PROD_CODE" property="PROD_CODE" jdbcType="CHAR" />
  <result column="INS_TYPE" property="INS_TYPE" jdbcType="CHAR" />
  <result column="PLANNED_VALUE" property="PLANNED_VALUE" jdbcType="BIGINT" />
  <result column="DIFF_VALUE" property="DIFF_VALUE" jdbcType="BIGINT" />
  <result column="MESSAGE_CODE" property="MESSAGE_CODE" jdbcType="VARCHAR" />
</resultMap>
<parameterMap id="procedureParamMap" class="java.util.Map">
  <parameter property="JGI_NO" jdbcType="INTEGER" javaType="java.lang.Integer" mode="IN" />
  <parameter property="TO_ZERO_CNT" jdbcType="INTEGER" javaType="java.lang.Integer" mode="OUT" />
  <parameter property="TO_CHOSEI_CNT" jdbcType="INTEGER" javaType="java.lang.Integer" mode="OUT" />
</parameterMap>

<delete id="deleteRESULT_TMP"  parameterClass="java.util.Map">
DELETE FROM DPS_I_ID_HBN_RESULT_TMP WHERE JGI_NO = #JGI_NO:INTEGER#
</delete>

<insert id="insertRESULT_TMP" parameterClass="java.util.Map">
<![CDATA[
INSERT INTO DPS_I_ID_HBN_RESULT_TMP
WITH
HNMK AS (
SELECT
  T1.PROD_CODE,
  T1.TG_PROD_CODE,
  T1.TG_PCAT_CODE,
  T1.TG_MKT_CODE,
  T3.PRESCRIPTION_TYPE
FROM
  DPS_I_FAMILY_PROD T1
    INNER JOIN (SELECT DISTINCT F_PROD_CODE FROM DPS_I_FAMILY_PROD) T2 ON T1.PROD_CODE = T2.F_PROD_CODE
    INNER JOIN DPS_C_PLANNED_PROD T3 ON
         T3.PROD_CODE = T1.PROD_CODE
     AND T3.PLAN_LEVEL_INS_DOC = '1'
     AND T3.CATEGORY = #CATEGORY:CHAR#
     AND T3.SALES = '01'
     AND T3.PLAN_TARGET_FLG = '1'
),
HNMK_INS AS (
SELECT
  #JGI_NO:INTEGER# AS JGI_NO,
  T1.*,
  T2.INS_NO
FROM
  HNMK T1
    INNER JOIN DPS_C_MR_INS_PROD_ALL T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T2.MAIN_MR = '0'
  AND T2.MR_NO = #JGI_NO:INTEGER#
),
HNMK_INS2 AS (
SELECT
  T1.*,
  CASE
    WHEN T2.INS_NO IS NULL THEN 0
    ELSE 1
  END AS EXCEPT_DIST_INS_FLG
FROM
  HNMK_INS T1
    LEFT OUTER JOIN DPS_I_EXCEPT_DIST_INS T2 ON T1.INS_NO = T2.INS_NO AND (T1.PROD_CODE = T2.PROD_CODE OR T2.PROD_CODE IS NULL)
),
TKD_PAT AS (
SELECT
  T2.F_PROD_CODE,
  T1.INS_NO,
  T1.DOC_NO,
  T1.TG_PCAT_CODE,
  T1.TG_PROD_CODE,
  T1.TKD_PATIENT_CNT
FROM
  ( SELECT
   TO_CHAR(TRIM(INS_CODE)) AS INS_NO,
   TO_CHAR(TRIM(DOC_CODE)) AS DOC_NO,
   TO_CHAR(TRIM(PROD_CAT_CODE)) AS TG_PCAT_CODE,
   TO_CHAR(TRIM(PROD_FAM_CODE)) AS TG_PROD_CODE,
   TKD_PATIENT_CNT
  FROM DPS_S_SY_TG_INS_DOC_PROD_PAT
  WHERE REC_STAT = 0 AND TKD_PATIENT_CNT != 0
  ) T1
  INNER JOIN DPS_I_FAMILY_PROD T2 ON T1.TG_PCAT_CODE = T2.TG_PCAT_CODE AND T1.TG_PROD_CODE = T2.TG_PROD_CODE
),
TKD_PAT_SUM AS (
SELECT
  T1.INS_NO,
  T1.DOC_NO,
  T2.TG_PCAT_CODE,
  T2.TG_PROD_CODE,
  SUM(T1.TKD_PATIENT_CNT) AS TKD_PATIENT_CNT
FROM
 TKD_PAT T1
 INNER JOIN DPS_I_FAMILY_PROD T2 ON T2.F_PROD_CODE = T2.PROD_CODE AND T1.F_PROD_CODE = T2.F_PROD_CODE
GROUP BY T1.INS_NO, T1.DOC_NO, T2.TG_PCAT_CODE, T2.TG_PROD_CODE
),
HNMK_INS_DOC AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.TG_PROD_CODE,
  T1.TG_PCAT_CODE,
  T1.TG_MKT_CODE,
  T1.INS_NO,
  T2.DOC_NO,
  T1.EXCEPT_DIST_INS_FLG,
  CASE
    WHEN T3.REQ_FLG != 0 THEN 1
    WHEN T3.DEL_FLG != 0 THEN 1
    ELSE 0
  END AS DEL_INS_FLG,
  NVL(T3.MAIN_INS_NO, T3.INS_NO) AS MAIN_INS_NO,
  T3.RELN_INS_NO,
  T3.RELN_INS_CODE,
  CASE T3.HO_INS_TYPE
    WHEN '1' THEN '1'
    WHEN '2' THEN '1'
    WHEN '3' THEN '2'
  END AS INS_TYPE,
  T2.DEPT_CODE,
  T6.NON_PATIENT_CNT,
  T6.TOT_PATIENT_CNT,
  T7.TKD_PATIENT_CNT,
  T5.CURRENT_PERIOD,
  NULL AS ADVANCE_PERIOD,
  NULL AS THEORETICAL_INC_VALUE_Y,
  NULL AS PLANNED_INC_VALUE_Y,
  NULL AS THEORETICAL_VALUE_Y,
  NULL AS PLANNED_VALUE_Y,
  T1.PRESCRIPTION_TYPE
FROM
  HNMK_INS2 T1
    INNER JOIN DPS_C_INS_DOC T2 ON T1.INS_NO = T2.INS_NO
      INNER JOIN DPS_C_INS_MST_ALL T3 ON T1.INS_NO = T3.INS_NO
        INNER JOIN DPS_C_DOC T4 ON T2.DOC_NO = T4.DOC_NO
          LEFT OUTER JOIN (
            SELECT
              TO_CHAR(TRIM(INS_CODE)) AS INS_NO,
              TO_CHAR(TRIM(DOC_CODE)) AS DOC_NO,
              TO_CHAR(TRIM(PROD_CAT_CODE)) AS TG_PCAT_CODE,
              TO_CHAR(TRIM(PROD_FAM_CODE)) AS TG_PROD_CODE,
              K_AMT_FIX AS CURRENT_PERIOD
            FROM
              DPS_S_SY_TG_INS_DOC_PROD_PLAN
            WHERE
              K_YH = (SELECT CASE SYS_TERM WHEN '0' THEN (TO_NUMBER(SYS_YEAR) - 1) || '2' WHEN '1' THEN SYS_YEAR || '1' END AS YH FROM DPS_S_SYS_MANAGE WHERE SYS_CLASS = '0' AND SYS_TYPE = '0')
              AND REC_STAT = 0
          ) T5 ON T2.INS_NO = T5.INS_NO AND T2.DOC_NO = T5.DOC_NO AND T1.TG_PCAT_CODE = T5.TG_PCAT_CODE AND T1.TG_PROD_CODE = T5.TG_PROD_CODE
          LEFT OUTER JOIN (
            SELECT
              TO_CHAR(TRIM(INS_CODE)) AS INS_NO,
              TO_CHAR(TRIM(DOC_CODE)) AS DOC_NO,
              TO_CHAR(TRIM(MKT_CODE)) AS TG_MKT_CODE,
              NON_PATIENT_CNT,
              TOT_PATIENT_CNT
            FROM
              DPS_S_SY_TG_INS_DOC_PATIENT
            WHERE
              REC_STAT = 0
          ) T6 ON T2.INS_NO = T6.INS_NO AND T2.DOC_NO = T6.DOC_NO AND T1.TG_MKT_CODE = T6.TG_MKT_CODE
          LEFT OUTER JOIN TKD_PAT_SUM T7 ON T2.INS_NO = T7.INS_NO AND T2.DOC_NO = T7.DOC_NO AND T1.TG_PCAT_CODE = T7.TG_PCAT_CODE AND T1.TG_PROD_CODE = T7.TG_PROD_CODE
WHERE
  T3.HO_INS_TYPE IN ('1', '2', '3')
  AND T4.DOC_TYPE = '1'
  AND T4.DEL_FLG = '0'
  AND T4.DOC_ATTRIBUTE = '0'
)
SELECT
  HNMK_INS_DOC.*,
  NVL(PRESCRIPT_PER, 100) AS PRESCRIPT_PER,
  CASE
    WHEN NON_PATIENT_CNT IS NULL THEN NULL
    ELSE
      CASE
        WHEN PRESCRIPTION_TYPE = '1' THEN TRUNC(NON_PATIENT_CNT * (NVL(PRESCRIPT_PER, 100) / 100))
        ELSE NON_PATIENT_CNT
      END
    END AS NON_PATIENT_NONU_CNT,
  CASE
    WHEN TOT_PATIENT_CNT IS NULL THEN NULL
    ELSE
      CASE
        WHEN PRESCRIPTION_TYPE = '1' THEN TRUNC(TOT_PATIENT_CNT * (NVL(PRESCRIPT_PER, 100) / 100))
        ELSE TOT_PATIENT_CNT
      END
    END AS TOT_PATIENT_NONU_CNT,
  #EXEC_JGI_NO:INTEGER#,
  #EXEC_JGI_NAME:VARCHAR#,
  SYSTIMESTAMP,
  #EXEC_JGI_NO:INTEGER#,
  #EXEC_JGI_NAME:VARCHAR#,
  SYSTIMESTAMP
FROM
  HNMK_INS_DOC
  LEFT OUTER JOIN (
    SELECT
      TO_CHAR(TRIM(INS_CODE)) AS INS_NO,
      PRESCRIPT_PER
    FROM
      DPS_S_SY_TG_INS_PRESCRIPT_PER
    WHERE
      REC_STAT = 0
  ) T ON HNMK_INS_DOC.MAIN_INS_NO = T.INS_NO
]]>
</insert>

<update id="updateRESULT_TMP_EXCEPT_APS" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_RESULT_TMP U1
USING (
  SELECT DISTINCT
    T1.PROD_CODE,
    T1.INS_NO
  FROM
    DPS_C_MR_INS_PROD_ALL T1
  WHERE
    T1.DIST_KB = '0'
    AND T1.MAIN_MR = '0'
    AND T1.MR_NO = #JGI_NO:INTEGER#
) U2
ON (
  U1.JGI_NO = #JGI_NO:INTEGER#
  AND U1.PROD_CODE = U2.PROD_CODE
  AND U1.INS_NO = U2.INS_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.EXCEPT_DIST_INS_FLG = '1',
  U1.UP_DATE = SYSTIMESTAMP
]]>
</update>

<update id="updateRESULT_TMP_FUKUSU_DOC" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_RESULT_TMP U1
USING (
  WITH INS_DOC_TBL AS (
    SELECT
      JGI_NO,
      PROD_CODE,
      DOC_NO,
      MAIN_INS_NO,
      INS_NO,
      RANK() OVER(PARTITION BY JGI_NO, PROD_CODE, DOC_NO, MAIN_INS_NO ORDER BY TGT_FLG, RELN_INS_CODE) AS RNUM
    FROM
    (
      SELECT
        T1.JGI_NO,
        T1.PROD_CODE,
        T1.DOC_NO,
        T1.MAIN_INS_NO,
        T1.INS_NO,
        T1.RELN_INS_CODE,
        CASE
          WHEN T2.INS_CLASS IN ('01', '03', '04') THEN '1'
          ELSE '9'
        END AS TGT_FLG
      FROM
        DPS_I_ID_HBN_RESULT_TMP T1
          INNER JOIN DPS_C_INS_MST_ALL T2 ON T1.INS_NO = T2.INS_NO
      WHERE
        T1.JGI_NO = #JGI_NO:INTEGER#
        AND T2.INS_CLASS IN('01', '02', '03', '04', '05', '06')
        AND T1.DEL_INS_FLG = '0'
        AND T1.EXCEPT_DIST_INS_FLG = '0'
    )
  ),
  SUM_TBL AS (
    SELECT
      T1.JGI_NO,
      T1.PROD_CODE,
      T1.DOC_NO,
      T1.MAIN_INS_NO,
      T1.NON_PATIENT_CNT,
      T1.TOT_PATIENT_CNT,
      T1.TKD_PATIENT_CNT,
      T1.NON_PATIENT_NONU_CNT,
      T1.TOT_PATIENT_NONU_CNT
    FROM
    (
      SELECT
        JGI_NO,
        PROD_CODE,
        DOC_NO,
        MAIN_INS_NO,
        COUNT(*) AS COUNT,
        SUM(NVL(NON_PATIENT_CNT, 0)) AS NON_PATIENT_CNT,
        SUM(NVL(TOT_PATIENT_CNT, 0)) AS TOT_PATIENT_CNT,
        SUM(NVL(TKD_PATIENT_CNT, 0)) AS TKD_PATIENT_CNT,
        SUM(NVL(NON_PATIENT_NONU_CNT, 0)) AS NON_PATIENT_NONU_CNT,
        SUM(NVL(TOT_PATIENT_NONU_CNT, 0)) AS TOT_PATIENT_NONU_CNT
      FROM
        DPS_I_ID_HBN_RESULT_TMP
      WHERE
        JGI_NO = #JGI_NO:INTEGER#
      GROUP BY
        JGI_NO,
        PROD_CODE,
        DOC_NO,
        MAIN_INS_NO
    ) T1
    WHERE
      T1.COUNT > 1
  ),
  BASE_TBL AS (
    SELECT
      T1.JGI_NO,
      T1.PROD_CODE,
      T1.DOC_NO,
      T1.MAIN_INS_NO,
      T1.INS_NO,
      T1.RNUM,
      CASE WHEN T1.RNUM = 1 THEN T2.NON_PATIENT_CNT
           ELSE 0 END AS NON_PATIENT_CNT,
      CASE WHEN T1.RNUM = 1 THEN T2.TOT_PATIENT_CNT
           ELSE 0 END AS TOT_PATIENT_CNT,
      CASE WHEN T1.RNUM = 1 THEN T2.TKD_PATIENT_CNT
           ELSE 0 END AS TKD_PATIENT_CNT,
      CASE WHEN T1.RNUM = 1 THEN T2.NON_PATIENT_NONU_CNT
           ELSE 0 END AS NON_PATIENT_NONU_CNT,
      CASE WHEN T1.RNUM = 1 THEN T2.TOT_PATIENT_NONU_CNT
           ELSE 0 END AS TOT_PATIENT_NONU_CNT
    FROM
      INS_DOC_TBL T1
        INNER JOIN SUM_TBL T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.DOC_NO = T2.DOC_NO AND T1.MAIN_INS_NO = T2.MAIN_INS_NO
  )
  SELECT
    T1.JGI_NO,
    T1.PROD_CODE,
    T1.DOC_NO,
    T1.INS_NO,
    T1.NON_PATIENT_CNT,
    T1.TOT_PATIENT_CNT,
    T1.TKD_PATIENT_CNT,
    T1.NON_PATIENT_NONU_CNT,
    T1.TOT_PATIENT_NONU_CNT
  FROM
    BASE_TBL T1
) U2
ON (
  U1.JGI_NO = U2.JGI_NO
  AND U1.PROD_CODE = U2.PROD_CODE
  AND U1.DOC_NO = U2.DOC_NO
  AND U1.INS_NO = U2.INS_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.NON_PATIENT_CNT = U2.NON_PATIENT_CNT,
  U1.TOT_PATIENT_CNT = U2.TOT_PATIENT_CNT,
  U1.TKD_PATIENT_CNT = U2.TKD_PATIENT_CNT,
  U1.NON_PATIENT_NONU_CNT = U2.NON_PATIENT_NONU_CNT,
  U1.TOT_PATIENT_NONU_CNT = U2.TOT_PATIENT_NONU_CNT,
  U1.UP_DATE = SYSTIMESTAMP
]]>
</update>

<delete id="deleteJISSEKI_INS"  parameterClass="java.util.Map">
DELETE FROM DPS_I_ID_HBN_JISSEKI_INS WHERE JGI_NO = #JGI_NO:INTEGER#
</delete>

<insert id="insertJISSEKI_INS" parameterClass="java.util.Map">
<![CDATA[
INSERT INTO DPS_I_ID_HBN_JISSEKI_INS
WITH
F_HNMK AS (
SELECT
 T1.F_PROD_CODE AS PROD_CODE,
 T1.TG_PROD_CODE,
 T1.TG_PCAT_CODE
FROM
 DPS_I_FAMILY_PROD T1
 INNER JOIN (SELECT F_PROD_CODE FROM DPS_I_FAMILY_PROD GROUP BY F_PROD_CODE) T2 ON T1.PROD_CODE = T2.F_PROD_CODE
),
HNMK AS (
SELECT
  T1.PROD_CODE,
  T1.TG_PROD_CODE,
  T1.TG_PCAT_CODE,
  T2.OFFICE_FLG,
  T2.INS_TYPE,
  100 - T2.LOSS_RATE AS LOSS_RATE,
  T2.REF_PROD_CODE,
  T2.REF_FROM,
  T2.REF_TO,
  (TO_NUMBER(REF_TO) - TO_NUMBER(REF_FROM) + 1) AS KIKAN
FROM
  F_HNMK T1
    INNER JOIN
      (
        SELECT
          CASE WHEN T2.SEQ_KEY IS NULL THEN '0' ELSE '1' END AS OFFICE_FLG,
          CASE WHEN T2.SEQ_KEY IS NULL THEN T1.PROD_CODE ELSE T2.PROD_CODE END AS PROD_CODE,
          CASE WHEN T2.SEQ_KEY IS NULL THEN T1.INS_TYPE ELSE T2.INS_TYPE END  AS INS_TYPE,
          CASE WHEN T2.SEQ_KEY IS NULL THEN T1.LOSS_RATE ELSE T2.LOSS_RATE END AS LOSS_RATE,
          CASE WHEN T2.SEQ_KEY IS NULL THEN T1.REF_PROD_CODE ELSE T2.REF_PROD_CODE END AS REF_PROD_CODE,
          CASE WHEN T2.SEQ_KEY IS NULL THEN T1.REF_FROM ELSE T2.REF_FROM END AS REF_FROM,
          CASE WHEN T2.SEQ_KEY IS NULL THEN T1.REF_TO ELSE T2.REF_TO END AS REF_TO
        FROM
          DPS_I_DOC_DIST_PARAM_HONBU T1
            LEFT OUTER JOIN DPS_I_DOC_DIST_PARAM_OFFICE T2 ON T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE AND T2.SOS_CD = #SOS_CD3:VARCHAR#
      ) T2 ON T1.PROD_CODE = T2.PROD_CODE
),
DR_TBL AS (
SELECT
  T1.PROD_CODE,
  T1.INS_TYPE,
  T2.RELN_INS_NO,
  SUM(NVL(DELIVERY_RECORD_01, 0)) AS "DR_01",
  SUM(NVL(DELIVERY_RECORD_02, 0)) AS "DR_02",
  SUM(NVL(DELIVERY_RECORD_03, 0)) AS "DR_03",
  SUM(NVL(DELIVERY_RECORD_04, 0)) AS "DR_04",
  SUM(NVL(DELIVERY_RECORD_05, 0)) AS "DR_05",
  SUM(NVL(DELIVERY_RECORD_06, 0)) AS "DR_06",
  SUM(NVL(DELIVERY_RECORD_07, 0)) AS "DR_07",
  SUM(NVL(DELIVERY_RECORD_08, 0)) AS "DR_08",
  SUM(NVL(DELIVERY_RECORD_09, 0)) AS "DR_09",
  SUM(NVL(DELIVERY_RECORD_10, 0)) AS "DR_10",
  SUM(NVL(DELIVERY_RECORD_11, 0)) AS "DR_11",
  SUM(NVL(DELIVERY_RECORD_12, 0)) AS "DR_12",
  SUM(NVL(DELIVERY_RECORD_13, 0)) AS "DR_13",
  SUM(NVL(DELIVERY_RECORD_14, 0)) AS "DR_14",
  SUM(NVL(DELIVERY_RECORD_15, 0)) AS "DR_15",
  SUM(NVL(DELIVERY_RECORD_16, 0)) AS "DR_16",
  SUM(NVL(DELIVERY_RECORD_17, 0)) AS "DR_17",
  SUM(NVL(DELIVERY_RECORD_18, 0)) AS "DR_18",
  SUM(NVL(DELIVERY_RECORD_19, 0)) AS "DR_19",
  SUM(NVL(DELIVERY_RECORD_20, 0)) AS "DR_20",
  SUM(NVL(DELIVERY_RECORD_21, 0)) AS "DR_21",
  SUM(NVL(DELIVERY_RECORD_22, 0)) AS "DR_22",
  SUM(NVL(DELIVERY_RECORD_23, 0)) AS "DR_23",
  SUM(NVL(DELIVERY_RECORD_24, 0)) AS "DR_24"
FROM
  DPS_I_DELIVERY_RESULT T1
    INNER JOIN DPS_C_INS_MST_ALL T2 ON T1.INS_NO = T2.INS_NO
      LEFT OUTER JOIN DPS_I_EXCEPT_DIST_INS T3 ON T1.INS_NO = T3.INS_NO AND (T1.PROD_CODE = T3.PROD_CODE OR T3.PROD_CODE IS NULL)
WHERE
  T1.INS_TYPE IN ('1', '2')
  AND T1.SLOPPY_CHARGE_FLG = '0'
  AND JGI_NO = #JGI_NO:INTEGER#
  AND T3.INS_NO IS NULL
GROUP BY
  T1.JGI_NO, T1.PROD_CODE, T1.INS_TYPE, T2.RELN_INS_NO
),
TRANS_DR_TBL AS (
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '01' AS REF_PERIOD, DR_01 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '02' AS REF_PERIOD, DR_02 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '03' AS REF_PERIOD, DR_03 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '04' AS REF_PERIOD, DR_04 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '05' AS REF_PERIOD, DR_05 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '06' AS REF_PERIOD, DR_06 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '07' AS REF_PERIOD, DR_07 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '08' AS REF_PERIOD, DR_08 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '09' AS REF_PERIOD, DR_09 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '10' AS REF_PERIOD, DR_10 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '11' AS REF_PERIOD, DR_11 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '12' AS REF_PERIOD, DR_12 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '13' AS REF_PERIOD, DR_13 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '14' AS REF_PERIOD, DR_14 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '15' AS REF_PERIOD, DR_15 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '16' AS REF_PERIOD, DR_16 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '17' AS REF_PERIOD, DR_17 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '18' AS REF_PERIOD, DR_18 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '19' AS REF_PERIOD, DR_19 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '20' AS REF_PERIOD, DR_20 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '21' AS REF_PERIOD, DR_21 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '22' AS REF_PERIOD, DR_22 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '23' AS REF_PERIOD, DR_23 AS DELIVERY_RECORD FROM DR_TBL
UNION
SELECT PROD_CODE, RELN_INS_NO, INS_TYPE, '24' AS REF_PERIOD, DR_24 AS DELIVERY_RECORD FROM DR_TBL
),
HNMK_DR_TBL AS (
SELECT
  T1.PROD_CODE,
  T1.TG_PROD_CODE,
  T1.TG_PCAT_CODE,
  T1.INS_TYPE,
  T1.LOSS_RATE,
  T1.REF_PROD_CODE,
  T1.KIKAN,
  T2.RELN_INS_NO,
  SUM(NVL(DELIVERY_RECORD, 0)) AS DELIVERY_RECORD_SUM
FROM
  HNMK T1
    INNER JOIN TRANS_DR_TBL T2
      ON T1.REF_PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE AND
      T1.REF_FROM <= T2.REF_PERIOD AND T1.REF_TO >= T2.REF_PERIOD
GROUP BY
  T1.PROD_CODE, T1.TG_PROD_CODE, T1.TG_PCAT_CODE, T1.INS_TYPE, T1.LOSS_RATE, T1.REF_PROD_CODE, T1.KIKAN, T2.RELN_INS_NO
),
RESULT_TBL AS (
SELECT
  #JGI_NO:INTEGER# AS JGI_NO,
  T1.PROD_CODE,
  T1.RELN_INS_NO,
  T1.INS_TYPE,
  ROUND(((6 / T1.KIKAN)  * T1.DELIVERY_RECORD_SUM * (T1.LOSS_RATE / 100)), -4) AS DELIVERY_RECORD_SUM,
  SYSTIMESTAMP AS UP_DATE
FROM
  HNMK_DR_TBL T1
    INNER JOIN DPS_C_INS_MST_ALL T2 ON T1.RELN_INS_NO = T2.RELN_INS_NO AND T2.RELN_INS_CODE = 'A'
)
SELECT * FROM RESULT_TBL WHERE DELIVERY_RECORD_SUM IS NOT NULL AND DELIVERY_RECORD_SUM > 0
]]>
</insert>

<delete id="deleteJISSEKI_INSDOC"  parameterClass="java.util.Map">
DELETE FROM DPS_I_ID_HBN_JISSEKI_INSDOC WHERE JGI_NO = #JGI_NO:INTEGER#
</delete>

<insert id="insertJISSEKI_INSDOC" parameterClass="java.util.Map">
<![CDATA[
INSERT INTO DPS_I_ID_HBN_JISSEKI_INSDOC
WITH
JISSEKI_TBL AS (
SELECT
  JGI_NO,
  PROD_CODE,
  RELN_INS_NO,
  INS_TYPE,
  DELIVERY_RECORD_SUM
FROM
  DPS_I_ID_HBN_JISSEKI_INS
WHERE
  JGI_NO = #JGI_NO:INTEGER#
),
INPUT_TBL AS (
SELECT
  JGI_NO,
  PROD_CODE,
  RELN_INS_NO,
  INS_TYPE,
  SUM(NVL(TKD_PATIENT_CNT, 0)) AS TKD_PATIENT_CNT,
  SUM(NVL(TOT_PATIENT_CNT, 0)) AS TOT_PATIENT_CNT,
  COUNT(DOC_NO) AS DOC_CNT
FROM
  DPS_I_ID_HBN_RESULT_TMP
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND EXCEPT_DIST_INS_FLG = '0'
GROUP BY
  JGI_NO, PROD_CODE, RELN_INS_NO, INS_TYPE
),
BASE_TBL AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.RELN_INS_NO,
  T1.INS_TYPE,
  T1.DELIVERY_RECORD_SUM,
  CASE
    WHEN T2.JGI_NO IS NULL THEN 'D'
    WHEN T2.DOC_CNT = 0 THEN 'D'
    WHEN T2.TKD_PATIENT_CNT > 0 THEN 'S'
    WHEN T2.TOT_PATIENT_CNT > 0 THEN 'K'
    ELSE 'D'
  END AS S_KBN,
  NVL(TKD_PATIENT_CNT, 0) AS TKD_PATIENT_CNT,
  NVL(TOT_PATIENT_CNT, 0) AS TOT_PATIENT_CNT,
  NVL(DOC_CNT, 0) AS DOC_CNT
FROM
  JISSEKI_TBL T1
    LEFT OUTER JOIN INPUT_TBL T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.RELN_INS_NO = T2.RELN_INS_NO
),
DUMMY_INS_DOC AS (
SELECT
  JGI_NO,
  PROD_CODE,
  RELN_INS_NO,
  INS_TYPE,
  INS_NO,
  DOC_NO,
  DELIVERY_RECORD,
  RANK() OVER(PARTITION BY JGI_NO, PROD_CODE, RELN_INS_NO ORDER BY DEL_INS_FLG ASC NULLS LAST, EXCEPT_DIST_INS_FLG ASC NULLS LAST, TGT_FLG, RELN_INS_CODE, DEPT_CODE DESC NULLS LAST, DOC_NO NULLS LAST) AS RNUM
FROM  (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.RELN_INS_NO,
  T2.RELN_INS_CODE,
  T1.INS_TYPE,
  T2.INS_NO,
  CASE
    WHEN T3.DOC_NO IS NULL THEN 'DDDDDD'
    ELSE T3.DOC_NO
  END AS DOC_NO,
  T1.DELIVERY_RECORD_SUM AS DELIVERY_RECORD,
  CASE
    WHEN T2.INS_CLASS IN ('01', '03', '04') THEN '1'
    ELSE '9'
  END AS TGT_FLG,
  T3.DEL_INS_FLG,
  T3.EXCEPT_DIST_INS_FLG,
  T3.DEPT_CODE
FROM
  BASE_TBL T1
    INNER JOIN DPS_C_INS_MST_ALL T2 ON T1.RELN_INS_NO = T2.RELN_INS_NO
      LEFT OUTER JOIN DPS_I_ID_HBN_RESULT_TMP T3 ON T1.JGI_NO = T3.JGI_NO AND T1.PROD_CODE = T3.PROD_CODE AND T2.INS_NO = T3.INS_NO
WHERE
  T1.S_KBN = 'D'
  AND NOT (T2.INS_CLASS = '06' AND T2.OLD_INSR_FLG = '3')
)
),
SK_INS_DOC AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.RELN_INS_NO,
  T1.INS_TYPE,
  T2.INS_NO,
  T2.DOC_NO,
  CASE
    WHEN T1.S_KBN = 'S' THEN ROUND((T1.DELIVERY_RECORD_SUM * (T2.TKD_PATIENT_CNT / T1.TKD_PATIENT_CNT)), -4)
    WHEN T1.S_KBN = 'K' THEN ROUND((T1.DELIVERY_RECORD_SUM * (T2.TOT_PATIENT_CNT / T1.TOT_PATIENT_CNT)), -4)
  END AS DELIVERY_RECORD
FROM
  BASE_TBL T1
    INNER JOIN DPS_I_ID_HBN_RESULT_TMP T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.RELN_INS_NO = T2.RELN_INS_NO AND T2.EXCEPT_DIST_INS_FLG = '0'
WHERE
  T1.S_KBN IN ('S', 'K')
),
RESULT_TBL AS (
SELECT
 *
FROM
  (
    SELECT JGI_NO, PROD_CODE, RELN_INS_NO, INS_TYPE, INS_NO, DOC_NO, DELIVERY_RECORD FROM DUMMY_INS_DOC WHERE RNUM = 1
    UNION
    SELECT JGI_NO, PROD_CODE, RELN_INS_NO, INS_TYPE, INS_NO, DOC_NO, DELIVERY_RECORD FROM SK_INS_DOC WHERE DELIVERY_RECORD IS NOT NULL
  )
ORDER BY
  JGI_NO, PROD_CODE, INS_NO
),
GOSA_TBL AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.RELN_INS_NO,
  T1.INS_TYPE,
  (NVL(T1.DELIVERY_RECORD_SUM, 0) - NVL(T2.DELIVERY_RECORD, 0)) AS GOSA
FROM
  JISSEKI_TBL T1
    LEFT OUTER JOIN
      (
        SELECT
          JGI_NO,
          PROD_CODE,
          RELN_INS_NO,
          INS_TYPE,
          SUM(DELIVERY_RECORD) AS DELIVERY_RECORD
        FROM
          RESULT_TBL
        GROUP BY
          JGI_NO, PROD_CODE, RELN_INS_NO, INS_TYPE
      ) T2
      ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.RELN_INS_NO = T2.RELN_INS_NO AND T1.INS_TYPE = T2.INS_TYPE
),
RESULT_PLUS_GOSA_TBL AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.RELN_INS_NO,
  T1.INS_TYPE,
  T1.INS_NO,
  T1.DOC_NO,
  T1.DELIVERY_RECORD,
  NVL(T2.GOSA, 0) AS GOSA,
  RANK() OVER(PARTITION BY T1.JGI_NO, T1.PROD_CODE, T1.RELN_INS_NO ORDER BY T1.DELIVERY_RECORD DESC, T1.DOC_NO, T1.INS_NO) AS RNUM
FROM
  RESULT_TBL T1
    LEFT OUTER JOIN GOSA_TBL T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.RELN_INS_NO = T2.RELN_INS_NO
)
SELECT
  *
FROM
(
SELECT
  JGI_NO,
  PROD_CODE,
  RELN_INS_NO,
  INS_TYPE,
  INS_NO,
  DOC_NO,
  CASE
    WHEN GOSA <> 0 AND RNUM = 1 THEN DELIVERY_RECORD + GOSA
    ELSE DELIVERY_RECORD
  END AS DELIVERY_RECORD,
  SYSTIMESTAMP AS UP_DATE
FROM
  RESULT_PLUS_GOSA_TBL
)
WHERE
  NVL(DELIVERY_RECORD, 0) <> 0
]]>
</insert>

<update id="updateRESULT_TMP_JISSEKI_SLIDE" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_RESULT_TMP U1
USING (
WITH
F_HNMK AS (
SELECT
 T1.F_PROD_CODE AS PROD_CODE,
 T1.TG_PROD_CODE,
 T1.TG_PCAT_CODE,
 T1.TG_MKT_CODE
FROM
 DPS_I_FAMILY_PROD T1
 INNER JOIN (SELECT F_PROD_CODE FROM DPS_I_FAMILY_PROD GROUP BY F_PROD_CODE) T2 ON T1.PROD_CODE = T2.F_PROD_CODE
)
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T2.TG_PROD_CODE,
  T2.TG_PCAT_CODE,
  T2.TG_MKT_CODE,
  T1.INS_NO,
  T1.DOC_NO,
  NVL(T4.EXCEPT_DIST_INS_FLG, '0') AS EXCEPT_DIST_INS_FLG,
  NVL(T4.DEL_INS_FLG, '0') AS DEL_INS_FLG,
  NVL(T3.MAIN_INS_NO, T1.INS_NO) AS MAIN_INS_NO,
  T1.RELN_INS_NO,
  T3.RELN_INS_CODE,
  T1.INS_TYPE,
  T4.DEPT_CODE,
  T4.NON_PATIENT_CNT,
  T4.TOT_PATIENT_CNT,
  T4.TKD_PATIENT_CNT,
  T4.CURRENT_PERIOD,
  T1.DELIVERY_RECORD AS ADVANCE_PERIOD,
  T4.THEORETICAL_INC_VALUE_Y,
  T4.PLANNED_INC_VALUE_Y,
  T4.THEORETICAL_VALUE_Y,
  T4.PLANNED_VALUE_Y,
  T4.PRESCRIPTION_TYPE,
  T4.PRESCRIPT_PER,
  T4.NON_PATIENT_NONU_CNT
FROM
  DPS_I_ID_HBN_JISSEKI_INSDOC T1
    INNER JOIN F_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
       INNER JOIN DPS_C_INS_MST_ALL T3 ON T1.INS_NO = T3.INS_NO
         LEFT OUTER JOIN DPS_I_ID_HBN_RESULT_TMP T4 ON T1.JGI_NO = T4.JGI_NO AND T1.PROD_CODE = T4.PROD_CODE AND T1.INS_NO = T4.INS_NO AND T1.DOC_NO = T4.DOC_NO
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
) U2
ON (
  U1.JGI_NO = U2.JGI_NO
  AND U1.PROD_CODE = U2.PROD_CODE
  AND U1.INS_NO = U2.INS_NO
  AND U1.DOC_NO = U2.DOC_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.ADVANCE_PERIOD =  U2.ADVANCE_PERIOD,
  U1.UP_DATE = SYSTIMESTAMP
WHEN NOT MATCHED THEN INSERT (
  JGI_NO,
  PROD_CODE,
  TG_PROD_CODE,
  TG_PCAT_CODE,
  TG_MKT_CODE,
  INS_NO,
  DOC_NO,
  EXCEPT_DIST_INS_FLG,
  DEL_INS_FLG,
  MAIN_INS_NO,
  RELN_INS_NO,
  RELN_INS_CODE,
  INS_TYPE,
  DEPT_CODE,
  NON_PATIENT_CNT,
  TOT_PATIENT_CNT,
  TKD_PATIENT_CNT,
  CURRENT_PERIOD,
  ADVANCE_PERIOD,
  THEORETICAL_INC_VALUE_Y,
  PLANNED_INC_VALUE_Y,
  THEORETICAL_VALUE_Y,
  PLANNED_VALUE_Y,
  PRESCRIPTION_TYPE,
  PRESCRIPT_PER,
  NON_PATIENT_NONU_CNT,
  IS_JGI_NO,
  IS_JGI_NAME,
  IS_DATE,
  UP_JGI_NO,
  UP_JGI_NAME,
  UP_DATE
)
VALUES
(
  U2.JGI_NO,
  U2.PROD_CODE,
  U2.TG_PROD_CODE,
  U2.TG_PCAT_CODE,
  U2.TG_MKT_CODE,
  U2.INS_NO,
  U2.DOC_NO,
  U2.EXCEPT_DIST_INS_FLG,
  U2.DEL_INS_FLG,
  U2.MAIN_INS_NO,
  U2.RELN_INS_NO,
  U2.RELN_INS_CODE,
  U2.INS_TYPE,
  U2.DEPT_CODE,
  U2.NON_PATIENT_CNT,
  U2.TOT_PATIENT_CNT,
  U2.TKD_PATIENT_CNT,
  U2.CURRENT_PERIOD,
  U2.ADVANCE_PERIOD,
  U2.THEORETICAL_INC_VALUE_Y,
  U2.PLANNED_INC_VALUE_Y,
  U2.THEORETICAL_VALUE_Y,
  U2.PLANNED_VALUE_Y,
  U2.PRESCRIPTION_TYPE,
  U2.PRESCRIPT_PER,
  U2.NON_PATIENT_NONU_CNT,
  #EXEC_JGI_NO:INTEGER#,
  #EXEC_JGI_NAME:VARCHAR#,
  SYSTIMESTAMP,
  #EXEC_JGI_NO:INTEGER#,
  #EXEC_JGI_NAME:VARCHAR#,
  SYSTIMESTAMP
)
]]>
</update>

<delete id="deleteUP_PROD"  parameterClass="java.util.Map">
DELETE FROM DPS_I_ID_HBN_UP_PROD WHERE JGI_NO = #JGI_NO:INTEGER#
</delete>

<insert id="insertUP_PROD" parameterClass="java.util.Map">
<![CDATA[
INSERT INTO DPS_I_ID_HBN_UP_PROD
WITH
TGT_HNMK AS (
SELECT
 T1.F_PROD_CODE AS PROD_CODE
FROM
 DPS_I_FAMILY_PROD T1
 INNER JOIN (SELECT F_PROD_CODE FROM DPS_I_FAMILY_PROD GROUP BY F_PROD_CODE) T2 ON T1.PROD_CODE = T2.F_PROD_CODE
),
MR_PLAN_TBL AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  '1' AS INS_TYPE,
  T1.PLANNED_VALUE_UH_Y AS PLAN_VAL
FROM
  DPS_I_MR_PLAN T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
UNION
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  '2' AS INS_TYPE,
  T1.PLANNED_VALUE_P_Y AS PLAN_VAL
FROM
  DPS_I_MR_PLAN T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
),
INS_SUM_TBL AS (
SELECT
  JGI_NO,
  PROD_CODE,
  INS_TYPE,
  SUM(DELIVERY_RECORD_SUM) AS DELIVERY_RECORD_SUM
FROM
  DPS_I_ID_HBN_JISSEKI_INS
WHERE
  JGI_NO = #JGI_NO:INTEGER#
GROUP BY
  JGI_NO, PROD_CODE, INS_TYPE
),
UP_TBL AS (
SELECT
  *
FROM
(
  SELECT
    T1.JGI_NO,
    T1.PROD_CODE,
    T1.INS_TYPE,
    (NVL(T1.PLAN_VAL, 0) - NVL(T2.DELIVERY_RECORD_SUM, 0)) AS UPDOWN_VAL
  FROM
    MR_PLAN_TBL T1
      LEFT OUTER JOIN INS_SUM_TBL T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE
)
WHERE
  UPDOWN_VAL > 0
),
PATIENT_TBL AS (
SELECT
  JGI_NO,
  PROD_CODE,
  INS_TYPE,
  SUM(NVL(NON_PATIENT_NONU_CNT, 0)) AS NON_PATIENT_NONU_CNT_SUM,
  SUM(NVL(TOT_PATIENT_NONU_CNT, 0)) AS TOT_PATIENT_NONU_CNT_SUM
FROM
  DPS_I_ID_HBN_RESULT_TMP
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND EXCEPT_DIST_INS_FLG = '0'
GROUP BY
  JGI_NO, PROD_CODE, INS_TYPE
),
UP_PATIENT_TBL AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.INS_TYPE,
  T1.UPDOWN_VAL,
  NVL(T2.NON_PATIENT_NONU_CNT_SUM, 0) AS NON_PATIENT_NONU_CNT_SUM,
  NVL(T2.TOT_PATIENT_NONU_CNT_SUM, 0) AS TOT_PATIENT_NONU_CNT_SUM
FROM
  UP_TBL T1
    INNER JOIN PATIENT_TBL T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE
)
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.INS_TYPE,
  T2.INS_NO,
  T2.DOC_NO,
  CASE
    WHEN T5.UP_CALC_REASON_KBN = 2 THEN
      CASE
        WHEN TOT_PATIENT_NONU_CNT_SUM = 0 THEN 0
        ELSE (T1.UPDOWN_VAL * NVL(T2.TOT_PATIENT_NONU_CNT, 0) / T1.TOT_PATIENT_NONU_CNT_SUM)
      END
    ELSE
      CASE
        WHEN NON_PATIENT_NONU_CNT_SUM = 0 THEN 0
        ELSE (T1.UPDOWN_VAL * NVL(T2.NON_PATIENT_NONU_CNT, 0) / T1.NON_PATIENT_NONU_CNT_SUM)
      END
  END AS PLAN_VAL,
  SYSTIMESTAMP AS UP_DATE
FROM
  UP_PATIENT_TBL T1
    INNER JOIN DPS_I_ID_HBN_RESULT_TMP T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE
    INNER JOIN
      (
        SELECT
          CASE WHEN T4.SEQ_KEY IS NULL THEN T3.PROD_CODE ELSE T4.PROD_CODE END AS PROD_CODE,
          CASE WHEN T4.SEQ_KEY IS NULL THEN T3.INS_TYPE ELSE T4.INS_TYPE END AS INS_TYPE,
          CASE WHEN T4.SEQ_KEY IS NULL THEN T3.UP_CALC_REASON_KBN ELSE T4.UP_CALC_REASON_KBN END AS UP_CALC_REASON_KBN
        FROM
            DPS_I_DOC_DIST_PARAM_HONBU T3
            LEFT OUTER JOIN DPS_I_DOC_DIST_PARAM_OFFICE T4 ON T3.PROD_CODE = T4.PROD_CODE AND T3.INS_TYPE = T4.INS_TYPE AND T4.SOS_CD = #SOS_CD3:VARCHAR#
      ) T5 ON T5.PROD_CODE = T1.PROD_CODE AND T5.INS_TYPE = T1.INS_TYPE
WHERE
  T2.JGI_NO = #JGI_NO:INTEGER#
  AND T2.EXCEPT_DIST_INS_FLG = '0'
]]>
</insert>

<delete id="deleteUP_PCAT"  parameterClass="java.util.Map">
DELETE FROM DPS_I_ID_HBN_UP_PCAT WHERE JGI_NO = #JGI_NO:INTEGER#
</delete>

<insert id="insertUP_PCAT" parameterClass="java.util.Map">
<![CDATA[
INSERT INTO DPS_I_ID_HBN_UP_PCAT
WITH
TGT_HNMK AS (
SELECT
 T1.F_PROD_CODE AS PROD_CODE,
 T1.TG_PCAT_CODE,
 T1.TG_MKT_CODE
FROM
 DPS_I_FAMILY_PROD T1
 INNER JOIN (SELECT F_PROD_CODE FROM DPS_I_FAMILY_PROD GROUP BY F_PROD_CODE) T2 ON T1.PROD_CODE = T2.F_PROD_CODE
)
SELECT
  T1.JGI_NO,
  T2.TG_PCAT_CODE,
  T1.INS_TYPE,
  T1.INS_NO,
  T1.DOC_NO,
  SUM(T1.PLAN_VAL) AS PLAN_VAL_SUM,
  99999 AS PCAT_NUM,
  99999 AS DOC_NUM,
  99999 AS COMP_NUM,
  SYSTIMESTAMP AS UP_DATE
FROM
  DPS_I_ID_HBN_UP_PROD T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
HAVING
  NVL(SUM(T1.PLAN_VAL), 0) > 0
GROUP BY
  T1.JGI_NO, T2.TG_PCAT_CODE, T1.INS_TYPE, T1.INS_NO, T1.DOC_NO
]]>
</insert>

<update id="updateUP_PCAT_PCAT_NUM" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_UP_PCAT U1
USING (
SELECT
  JGI_NO,
  TG_PCAT_CODE,
  INS_NO,
  DOC_NO,
  RANK() OVER(PARTITION BY JGI_NO, TG_PCAT_CODE, INS_TYPE ORDER BY PLAN_VAL DESC NULLS LAST) AS RNUM
FROM
  DPS_I_ID_HBN_UP_PCAT
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND PLAN_VAL <> 0
) U2
ON (
  U1.JGI_NO = U2.JGI_NO
  AND U1.TG_PCAT_CODE = U2.TG_PCAT_CODE
  AND U1.INS_NO = U2.INS_NO
  AND U1.DOC_NO = U2.DOC_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.PCAT_NUM = CASE WHEN U2.RNUM = 1 THEN 1 ELSE 99999 END,
  U1.UP_DATE = SYSTIMESTAMP
]]>
</update>

<update id="updateUP_PCAT_DOC_NUM" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_UP_PCAT U1
USING (
WITH
PROD_FIELD AS (
SELECT DISTINCT
 T1.FIELD_CODE,
 T2.TG_PCAT_CODE,
 T3.INS_NO
FROM
 DPS_C_MR_PROD_FIELD T1
 INNER JOIN (SELECT DISTINCT TG_PCAT_CODE, PROD_CODE FROM DPS_I_FAMILY_PROD) T2 ON T1.PROD_CODE = T2.PROD_CODE
 INNER JOIN DPS_C_MR_INS_PROD_ALL T3 ON T1.PROD_CODE = T3.PROD_CODE AND T1.MR_CAT = T3.MR_CAT AND T3.MR_NO = #JGI_NO:INTEGER# AND T3.MAIN_MR = '0'
)
SELECT
  T1.JGI_NO,
  T1.TG_PCAT_CODE,
  T1.INS_NO,
  T1.DOC_NO,
  T1.PLAN_VAL,
  RANK() OVER(PARTITION BY T1.JGI_NO, T1.INS_NO, T3.FIELD_CODE, T1.DOC_NO ORDER BY T1.PLAN_VAL DESC NULLS LAST, T2.TG_PCAT_DISP_ORDER) AS RNUM
FROM
  DPS_I_ID_HBN_UP_PCAT T1
    INNER JOIN (SELECT DISTINCT TG_PCAT_CODE, TG_PCAT_DISP_ORDER FROM DPS_I_FAMILY_PROD) T2 ON T1.TG_PCAT_CODE = T2.TG_PCAT_CODE
    INNER JOIN PROD_FIELD T3 ON T2.TG_PCAT_CODE = T3.TG_PCAT_CODE AND T1.INS_NO = T3.INS_NO
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND PLAN_VAL <> 0
ORDER BY
  INS_NO, DOC_NO
) U2
ON (
  U1.JGI_NO = U2.JGI_NO
  AND U1.TG_PCAT_CODE = U2.TG_PCAT_CODE
  AND U1.INS_NO = U2.INS_NO
  AND U1.DOC_NO = U2.DOC_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.DOC_NUM = U2.RNUM,
  U1.UP_DATE = SYSTIMESTAMP
]]>
</update>

<update id="updateUP_PCAT_REHBN" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_UP_PCAT U1
USING (
WITH
PROD_FIELD AS (
SELECT DISTINCT
 T1.FIELD_CODE,
 T2.TG_PCAT_CODE,
 T3.INS_NO
FROM
 DPS_C_MR_PROD_FIELD T1
 INNER JOIN (SELECT DISTINCT TG_PCAT_CODE, PROD_CODE FROM DPS_I_FAMILY_PROD) T2 ON T1.PROD_CODE = T2.PROD_CODE
 INNER JOIN DPS_C_MR_INS_PROD_ALL T3 ON T1.PROD_CODE = T3.PROD_CODE AND T1.MR_CAT = T3.MR_CAT AND T3.MR_NO = #JGI_NO:INTEGER# AND T3.MAIN_MR = '0'
),
TGT_TBL AS (
SELECT
  JGI_NO,
  TG_PCAT_CODE,
  INS_TYPE,
  INS_NO,
  DOC_NO,
  PLAN_VAL,
  PCAT_NUM,
  DOC_NUM
FROM
(
SELECT
  T1.*,
  RANK() OVER (PARTITION BY T1.JGI_NO, T1.INS_NO, T1.DOC_NO, T2.FIELD_CODE ORDER BY T1.PCAT_NUM, T1.DOC_NUM, T1.PLAN_VAL DESC) AS RNUM
FROM
  DPS_I_ID_HBN_UP_PCAT T1
  INNER JOIN PROD_FIELD T2 ON T1.TG_PCAT_CODE = T2.TG_PCAT_CODE AND T1.INS_NO = T2.INS_NO
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
  AND T1.PLAN_VAL IS NOT NULL
  AND T1.PLAN_VAL > 0
  AND (T1.PCAT_NUM = 1 OR T1.DOC_NUM BETWEEN 1 AND 3)
)
WHERE
  PCAT_NUM = 1 OR RNUM <= 3
),
UPDATE_ZERO AS (
SELECT
  JGI_NO,
  TG_PCAT_CODE,
  INS_TYPE,
  INS_NO,
  DOC_NO,
  0 AS PLAN_VAL,
  PCAT_NUM,
  DOC_NUM
FROM
  DPS_I_ID_HBN_UP_PCAT T1
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND NOT EXISTS (
    SELECT
     1
    FROM
      TGT_TBL T2
    WHERE
      T1.JGI_NO = T2.JGI_NO
      AND T1.TG_PCAT_CODE = T2.TG_PCAT_CODE
      AND T1.INS_NO = T2.INS_NO
      AND T1.DOC_NO = T2.DOC_NO
  )
),
BOSU_TBL AS (
SELECT
  JGI_NO,
  TG_PCAT_CODE,
  INS_TYPE,
  SUM(PLAN_VAL) PLAN_VAL_SUM
FROM
   TGT_TBL
GROUP BY
  JGI_NO, TG_PCAT_CODE, INS_TYPE
),
ALL_BOSU_TBL AS (
SELECT
  JGI_NO,
  TG_PCAT_CODE,
  INS_TYPE,
  SUM(PLAN_VAL) PLAN_VAL_SUM
FROM
   DPS_I_ID_HBN_UP_PCAT
WHERE
  JGI_NO = #JGI_NO:INTEGER#
GROUP BY
  JGI_NO, TG_PCAT_CODE, INS_TYPE
),
UPDATE_REHBN AS (
SELECT
  T1.JGI_NO,
  T1.TG_PCAT_CODE,
  T1.INS_TYPE,
  T1.INS_NO,
  T1.DOC_NO,
  (T3.PLAN_VAL_SUM * (T1.PLAN_VAL / T2.PLAN_VAL_SUM)) AS PLAN_VAL,
  T1.PCAT_NUM,
  T1.DOC_NUM
FROM
   TGT_TBL T1
     INNER JOIN BOSU_TBL T2 ON T1.JGI_NO = T2.JGI_NO AND T1.TG_PCAT_CODE = T2.TG_PCAT_CODE AND T1.INS_TYPE = T2.INS_TYPE
       INNER JOIN ALL_BOSU_TBL T3 ON T1.JGI_NO = T3.JGI_NO AND T1.TG_PCAT_CODE = T3.TG_PCAT_CODE AND T1.INS_TYPE = T3.INS_TYPE
)
SELECT * FROM UPDATE_ZERO
UNION
SELECT * FROM UPDATE_REHBN
) U2
ON (
  U1.JGI_NO = U2.JGI_NO
  AND U1.TG_PCAT_CODE = U2.TG_PCAT_CODE
  AND U1.INS_TYPE = U2.INS_TYPE
  AND U1.INS_NO = U2.INS_NO
  AND U1.DOC_NO = U2.DOC_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.PLAN_VAL = U2.PLAN_VAL,
  U1.UP_DATE = SYSTIMESTAMP
]]>
</update>

<update id="updateUP_PCAT_COMP_NUM" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_UP_PCAT U1
USING (
WITH
PROD_FIELD AS (
SELECT DISTINCT
 T1.FIELD_CODE,
 T2.TG_PCAT_CODE,
 T3.INS_NO
FROM
 DPS_C_MR_PROD_FIELD T1
 INNER JOIN (SELECT DISTINCT TG_PCAT_CODE, PROD_CODE FROM DPS_I_FAMILY_PROD) T2 ON T1.PROD_CODE = T2.PROD_CODE
 INNER JOIN DPS_C_MR_INS_PROD_ALL T3 ON T1.PROD_CODE = T3.PROD_CODE AND T1.MR_CAT = T3.MR_CAT AND T3.MR_NO = #JGI_NO:INTEGER# AND T3.MAIN_MR = '0'
)
SELECT
  T1.JGI_NO,
  T1.TG_PCAT_CODE,
  T1.INS_NO,
  T1.DOC_NO,
  T1.PLAN_VAL,
  T3.FIELD_CODE,
  T1.PCAT_NUM,
  T1.DOC_NUM,
  RANK() OVER(PARTITION BY T1.JGI_NO, T1.INS_NO, T3.FIELD_CODE, T1.DOC_NO ORDER BY T1.PCAT_NUM, T1.DOC_NUM) AS RNUM
FROM
  DPS_I_ID_HBN_UP_PCAT T1
    INNER JOIN (SELECT DISTINCT TG_PCAT_CODE, TG_PCAT_DISP_ORDER FROM DPS_I_FAMILY_PROD) T2 ON T1.TG_PCAT_CODE = T2.TG_PCAT_CODE
    INNER JOIN PROD_FIELD T3 ON T2.TG_PCAT_CODE = T3.TG_PCAT_CODE AND T1.INS_NO = T3.INS_NO
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND T1.PLAN_VAL <> 0
ORDER BY
  INS_NO, DOC_NO, FIELD_CODE
) U2
ON (
  U1.JGI_NO = U2.JGI_NO
  AND U1.TG_PCAT_CODE = U2.TG_PCAT_CODE
  AND U1.INS_NO = U2.INS_NO
  AND U1.DOC_NO = U2.DOC_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.COMP_NUM = U2.RNUM,
  U1.UP_DATE = SYSTIMESTAMP
]]>
</update>

<procedure id="updateUP_PCAT_CHOSEI" parameterMap="procedureParamMap">
{call DPS_PROCESS_0002(?, ?, ?)}
</procedure>

<update id="updateRESULT_TMP_UP" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_RESULT_TMP U1
USING (
WITH
TGT_HNMK AS (
SELECT
 T1.F_PROD_CODE AS PROD_CODE,
 T1.TG_PCAT_CODE
FROM
 DPS_I_FAMILY_PROD T1
 INNER JOIN (SELECT F_PROD_CODE FROM DPS_I_FAMILY_PROD GROUP BY F_PROD_CODE) T2 ON T1.PROD_CODE = T2.F_PROD_CODE
),
PROD_FAM_SUM AS (
SELECT
  T1.JGI_NO,
  T2.TG_PCAT_CODE,
  T1.INS_TYPE,
  T1.INS_NO,
  T1.DOC_NO,
  SUM(NVL(T1.PLAN_VAL, 0)) AS PLAN_VAL_PCAT_SUM
FROM
  DPS_I_ID_HBN_UP_PROD T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
GROUP BY
  T1.JGI_NO, T2.TG_PCAT_CODE, T1.INS_TYPE, T1.INS_NO, T1.DOC_NO
),
PROD_RATIO AS (
SELECT
  T1.JGI_NO,
  T2.TG_PCAT_CODE,
  T1.PROD_CODE,
  T1.INS_TYPE,
  T1.INS_NO,
  T1.DOC_NO,
  CASE
    WHEN NVL(T3.PLAN_VAL_PCAT_SUM, 0) = 0 THEN 0
    ELSE T1.PLAN_VAL /T3.PLAN_VAL_PCAT_SUM
  END AS PROD_RATIO
FROM
  DPS_I_ID_HBN_UP_PROD T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
      INNER JOIN PROD_FAM_SUM T3 ON T1.JGI_NO = T3.JGI_NO AND T2.TG_PCAT_CODE = T3.TG_PCAT_CODE AND T1.INS_TYPE = T3.INS_TYPE AND T1.INS_NO = T3.INS_NO AND T1.DOC_NO = T3.DOC_NO
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
)
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.INS_NO,
  T1.DOC_NO,
  ROUND(T2.PLAN_VAL * T1.PROD_RATIO, -4) AS PLAN_VAL
FROM
  PROD_RATIO T1
    INNER JOIN DPS_I_ID_HBN_UP_PCAT T2 ON T1.JGI_NO = T2.JGI_NO AND T1.TG_PCAT_CODE = T2.TG_PCAT_CODE AND T1.INS_NO = T2.INS_NO AND T1.DOC_NO = T2.DOC_NO
) U2
ON (
  U1.JGI_NO = U2.JGI_NO
  AND U1.PROD_CODE = U2.PROD_CODE
  AND U1.INS_NO = U2.INS_NO
  AND U1.DOC_NO = U2.DOC_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.THEORETICAL_INC_VALUE_Y = U2.PLAN_VAL,
  U1.UP_DATE = SYSTIMESTAMP
]]>
</update>

<update id="updateRESULT_TMP_DOWN" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_RESULT_TMP U1
USING (
WITH
TGT_HNMK AS (
SELECT
 T1.F_PROD_CODE AS PROD_CODE
FROM
 DPS_I_FAMILY_PROD T1
 INNER JOIN (SELECT F_PROD_CODE FROM DPS_I_FAMILY_PROD GROUP BY F_PROD_CODE) T2 ON T1.PROD_CODE = T2.F_PROD_CODE
),
MR_PLAN_TBL AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  '1' AS INS_TYPE,
  T1.PLANNED_VALUE_UH_Y AS PLAN_VAL
FROM
  DPS_I_MR_PLAN T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
UNION
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  '2' AS INS_TYPE,
  T1.PLANNED_VALUE_P_Y AS PLAN_VAL
FROM
  DPS_I_MR_PLAN T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
),
INS_SUM_TBL AS (
SELECT
  JGI_NO,
  PROD_CODE,
  INS_TYPE,
  SUM(DELIVERY_RECORD_SUM) AS DELIVERY_RECORD_SUM
FROM
  DPS_I_ID_HBN_JISSEKI_INS
WHERE
  JGI_NO = #JGI_NO:INTEGER#
GROUP BY
  JGI_NO, PROD_CODE, INS_TYPE
),
DOWN_TBL AS (
SELECT
  *
FROM
(
  SELECT
    T1.JGI_NO,
    T1.PROD_CODE,
    T1.INS_TYPE,
    T1.PLAN_VAL,
    NVL(T2.DELIVERY_RECORD_SUM, 0) AS DELIVERY_RECORD_SUM,
    (NVL(T1.PLAN_VAL, 0) - NVL(T2.DELIVERY_RECORD_SUM, 0)) AS UPDOWN_VAL
  FROM
    MR_PLAN_TBL T1
      LEFT OUTER JOIN INS_SUM_TBL T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE
)
WHERE
  UPDOWN_VAL <= 0
)
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.INS_TYPE,
  T1.INS_NO,
  T1.DOC_NO,
  CASE
    WHEN T3.DELIVERY_RECORD_SUM = 0 THEN 0
    ELSE ROUND((T2.UPDOWN_VAL * (T1.DELIVERY_RECORD / T3.DELIVERY_RECORD_SUM)), -4)
  END AS DOWN_VAL
FROM
  DPS_I_ID_HBN_JISSEKI_INSDOC T1
    INNER JOIN DOWN_TBL T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE
      INNER JOIN INS_SUM_TBL T3 ON T1.JGI_NO = T3.JGI_NO AND T1.PROD_CODE = T3.PROD_CODE AND T1.INS_TYPE = T3.INS_TYPE
) U2
ON (
  U1.JGI_NO = U2.JGI_NO
  AND U1.PROD_CODE = U2.PROD_CODE
  AND U1.INS_TYPE = U2.INS_TYPE
  AND U1.INS_NO = U2.INS_NO
  AND U1.DOC_NO = U2.DOC_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.THEORETICAL_INC_VALUE_Y = U2.DOWN_VAL,
  U1.UP_DATE = SYSTIMESTAMP
]]>
</update>

<update id="updateRESULT_TMP_UPDOWN_GOSA" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_RESULT_TMP U1
USING (
WITH
TGT_HNMK AS (
SELECT
 T1.F_PROD_CODE AS PROD_CODE
FROM
 DPS_I_FAMILY_PROD T1
 INNER JOIN (SELECT F_PROD_CODE FROM DPS_I_FAMILY_PROD GROUP BY F_PROD_CODE) T2 ON T1.PROD_CODE = T2.F_PROD_CODE
),
MR_PLAN_TBL AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  '1' AS INS_TYPE,
  T1.PLANNED_VALUE_UH_Y AS PLAN_VAL
FROM
  DPS_I_MR_PLAN T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
UNION
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  '2' AS INS_TYPE,
  T1.PLANNED_VALUE_P_Y AS PLAN_VAL
FROM
  DPS_I_MR_PLAN T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
),
INS_SUM_TBL AS (
SELECT
  JGI_NO,
  PROD_CODE,
  INS_TYPE,
  SUM(DELIVERY_RECORD_SUM) AS DELIVERY_RECORD_SUM
FROM
  DPS_I_ID_HBN_JISSEKI_INS
WHERE
  JGI_NO = #JGI_NO:INTEGER#
GROUP BY
  JGI_NO, PROD_CODE, INS_TYPE
),
UPDOWN_TBL AS (
SELECT
  *
FROM
(
  SELECT
    T1.JGI_NO,
    T1.PROD_CODE,
    T1.INS_TYPE,
    (NVL(T1.PLAN_VAL, 0) - NVL(T2.DELIVERY_RECORD_SUM, 0)) AS UPDOWN_VAL
  FROM
    MR_PLAN_TBL T1
      LEFT OUTER JOIN INS_SUM_TBL T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE
)
),
UPDOWN_RESULT_SUM AS (
SELECT
  JGI_NO,
  PROD_CODE,
  INS_TYPE,
  SUM(THEORETICAL_INC_VALUE_Y) AS UP_SUM_VAL
FROM
  DPS_I_ID_HBN_RESULT_TMP
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND THEORETICAL_INC_VALUE_Y IS NOT NULL
GROUP BY
  JGI_NO, PROD_CODE, INS_TYPE
),
SABUN_TBL AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.INS_TYPE,
  T1.UPDOWN_VAL,
  (T1.UPDOWN_VAL - NVL(T2.UP_SUM_VAL, 0)) AS SABUN_VAL
FROM
  UPDOWN_TBL T1
    INNER JOIN UPDOWN_RESULT_SUM T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE
)
SELECT
  *
FROM
(
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.INS_TYPE,
  T2.INS_NO,
  T2.DOC_NO,
  T2.THEORETICAL_INC_VALUE_Y,
  T1.UPDOWN_VAL,
  T1.SABUN_VAL,
  CASE
    WHEN UPDOWN_VAL > 0 THEN RANK() OVER (PARTITION BY T1.JGI_NO, T1.PROD_CODE, T1.INS_TYPE ORDER BY T2.THEORETICAL_INC_VALUE_Y DESC NULLS LAST, T2.DOC_NO, T2.INS_NO)
    ELSE RANK() OVER (PARTITION BY T1.JGI_NO, T1.PROD_CODE, T1.INS_TYPE ORDER BY T2.THEORETICAL_INC_VALUE_Y NULLS LAST, T2.DOC_NO, T2.INS_NO)
  END AS RNUM,
  (T2.THEORETICAL_INC_VALUE_Y + T1.SABUN_VAL) AS SUM_VAL
FROM
  SABUN_TBL T1
    INNER JOIN DPS_I_ID_HBN_RESULT_TMP T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE
WHERE
  T1.SABUN_VAL IS NOT NULL
  AND T1.SABUN_VAL <> 0
)
WHERE
  RNUM = 1
) U2
ON (
  U1.JGI_NO = U2.JGI_NO
  AND U1.PROD_CODE = U2.PROD_CODE
  AND U1.INS_TYPE = U2.INS_TYPE
  AND U1.INS_NO = U2.INS_NO
  AND U1.DOC_NO = U2.DOC_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.THEORETICAL_INC_VALUE_Y =
  CASE
    WHEN U2.UPDOWN_VAL > 0 THEN U2.SUM_VAL
    WHEN U2.SUM_VAL > 0 THEN 0
    ELSE U2.SUM_VAL
  END,
  U1.UP_DATE = SYSTIMESTAMP
]]>
</update>

<update id="updateRESULT_TMP_PLAN_CLRFLG" parameterClass="java.util.Map">
<![CDATA[
MERGE INTO DPS_I_ID_HBN_RESULT_TMP U1
USING (
WITH
TGT_HNMK AS (
SELECT
 T1.F_PROD_CODE AS PROD_CODE,
 T1.TG_PROD_CODE,
 T1.TG_PCAT_CODE,
 T1.TG_MKT_CODE
FROM
 DPS_I_FAMILY_PROD T1
 INNER JOIN (SELECT F_PROD_CODE FROM DPS_I_FAMILY_PROD GROUP BY F_PROD_CODE) T2 ON T1.PROD_CODE = T2.F_PROD_CODE
)
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T2.TG_PROD_CODE,
  T2.TG_PCAT_CODE,
  T2.TG_MKT_CODE,
  T1.INS_NO,
  T1.DOC_NO,
  T1.EXCEPT_DIST_INS_FLG,
  T1.DEL_INS_FLG,
  T1.MAIN_INS_NO,
  T3.RELN_INS_NO,
  T3.RELN_INS_CODE,
  CASE T3.HO_INS_TYPE
    WHEN '1' THEN '1'
    WHEN '2' THEN '1'
    WHEN '3' THEN '2'
  END AS INS_TYPE,
  NULL AS DEPT_CODE,
  NULL AS NON_PATIENT_CNT,
  NULL AS TOT_PATIENT_CNT,
  NULL AS TKD_PATIENT_CNT,
  NULL AS CURRENT_PERIOD,
  NULL AS ADVANCE_PERIOD,
  NULL AS THEORETICAL_INC_VALUE_Y,
  T1.PLANNED_INC_VALUE_Y,
  NULL AS THEORETICAL_VALUE_Y,
  NULL AS PLANNED_VALUE_Y,
  NULL AS PRESCRIPTION_TYPE,
  NULL AS PRESCRIPT_PER,
  NULL AS NON_PATIENT_NONU_CNT,
  T1.IS_JGI_NO,
  T1.IS_JGI_NAME,
  T1.IS_DATE,
  T1.UP_JGI_NO,
  T1.UP_JGI_NAME,
  T1.UP_DATE
FROM
  DPS_I_INS_DOC_PLAN T1
    LEFT OUTER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
      LEFT OUTER JOIN DPS_C_INS_MST_ALL T3 ON T1.INS_NO = T3.INS_NO
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND PLANNED_INC_VALUE_Y IS NOT NULL
) U2
ON (
  U1.JGI_NO = U2.JGI_NO
  AND U1.PROD_CODE = U2.PROD_CODE
  AND U1.INS_NO = U2.INS_NO
  AND U1.DOC_NO = U2.DOC_NO
)
WHEN MATCHED THEN UPDATE SET
  U1.PLANNED_INC_VALUE_Y = U2.PLANNED_INC_VALUE_Y
WHEN NOT MATCHED THEN INSERT (
  JGI_NO,
  PROD_CODE,
  TG_PROD_CODE,
  TG_PCAT_CODE,
  TG_MKT_CODE,
  INS_NO,
  DOC_NO,
  EXCEPT_DIST_INS_FLG,
  DEL_INS_FLG,
  MAIN_INS_NO,
  RELN_INS_NO,
  RELN_INS_CODE,
  INS_TYPE,
  DEPT_CODE,
  NON_PATIENT_CNT,
  TOT_PATIENT_CNT,
  TKD_PATIENT_CNT,
  CURRENT_PERIOD,
  ADVANCE_PERIOD,
  THEORETICAL_INC_VALUE_Y,
  PLANNED_INC_VALUE_Y,
  THEORETICAL_VALUE_Y,
  PLANNED_VALUE_Y,
  PRESCRIPTION_TYPE,
  PRESCRIPT_PER,
  NON_PATIENT_NONU_CNT,
  IS_JGI_NO,
  IS_JGI_NAME,
  IS_DATE,
  UP_JGI_NO,
  UP_JGI_NAME,
  UP_DATE
)
VALUES
(
  U2.JGI_NO,
  U2.PROD_CODE,
  U2.TG_PROD_CODE,
  U2.TG_PCAT_CODE,
  U2.TG_MKT_CODE,
  U2.INS_NO,
  U2.DOC_NO,
  U2.EXCEPT_DIST_INS_FLG,
  U2.DEL_INS_FLG,
  U2.MAIN_INS_NO,
  U2.RELN_INS_NO,
  U2.RELN_INS_CODE,
  U2.INS_TYPE,
  U2.DEPT_CODE,
  U2.NON_PATIENT_CNT,
  U2.TOT_PATIENT_CNT,
  U2.TKD_PATIENT_CNT,
  U2.CURRENT_PERIOD,
  U2.ADVANCE_PERIOD,
  U2.THEORETICAL_INC_VALUE_Y,
  U2.PLANNED_INC_VALUE_Y,
  U2.THEORETICAL_VALUE_Y,
  U2.PLANNED_VALUE_Y,
  U2.PRESCRIPTION_TYPE,
  U2.PRESCRIPT_PER,
  U2.NON_PATIENT_NONU_CNT,
  U2.IS_JGI_NO,
  U2.IS_JGI_NAME,
  U2.IS_DATE,
  U2.UP_JGI_NO,
  U2.UP_JGI_NAME,
  U2.UP_DATE
)
]]>
</update>

<update id="updateRESULT_TMP_PLAN" parameterClass="java.util.Map">
<![CDATA[
UPDATE DPS_I_ID_HBN_RESULT_TMP
SET
  THEORETICAL_VALUE_Y =
    CASE
      WHEN ADVANCE_PERIOD IS NULL THEN THEORETICAL_INC_VALUE_Y
      ELSE CASE
        WHEN THEORETICAL_INC_VALUE_Y IS NULL THEN ADVANCE_PERIOD
        ELSE THEORETICAL_INC_VALUE_Y + ADVANCE_PERIOD
      END
    END,
  PLANNED_VALUE_Y =
    CASE
      WHEN ADVANCE_PERIOD IS NULL THEN NVL(PLANNED_INC_VALUE_Y, THEORETICAL_INC_VALUE_Y)
      ELSE CASE
        WHEN NVL(PLANNED_INC_VALUE_Y, THEORETICAL_INC_VALUE_Y) IS NULL THEN ADVANCE_PERIOD
        ELSE NVL(PLANNED_INC_VALUE_Y, THEORETICAL_INC_VALUE_Y) + ADVANCE_PERIOD
      END
    END,
  UP_DATE = SYSTIMESTAMP
WHERE
  JGI_NO = #JGI_NO:INTEGER#
]]>
</update>

<delete id="deleteINS_DOC_PLAN" parameterClass="java.util.Map">
DELETE FROM DPS_I_INS_DOC_PLAN WHERE JGI_NO = #JGI_NO:INTEGER#
</delete>

<insert id="insertINS_DOC_PLAN" parameterClass="java.util.Map">
<![CDATA[
INSERT INTO DPS_I_INS_DOC_PLAN
(
  SEQ_KEY,
  JGI_NO,
  PROD_CODE,
  INS_NO,
  MAIN_INS_NO,
  DOC_NO,
  EXCEPT_DIST_INS_FLG,
  DEL_INS_FLG,
  NON_PATIENT_CNT,
  TOT_PATIENT_CNT,
  TKD_PATIENT_CNT,
  CURRENT_PERIOD,
  ADVANCE_PERIOD,
  THEORETICAL_INC_VALUE_Y,
  PLANNED_INC_VALUE_Y,
  THEORETICAL_VALUE_Y,
  PLANNED_VALUE_Y,
  PLANNED_VALUE_T,
  IS_JGI_NO,
  IS_JGI_NAME,
  IS_DATE,
  UP_JGI_NO,
  UP_JGI_NAME,
  UP_DATE
)
WITH
TGT_HNMK_INS_TYPE AS (
SELECT
  PROD_CODE,
  '1' AS INS_TYPE
FROM
  DPS_I_MR_PLAN
WHERE
  JGI_NO = #JGI_NO:INTEGER#
UNION
SELECT
  PROD_CODE,
  '2' AS INS_TYPE
FROM
  DPS_I_MR_PLAN
WHERE
  JGI_NO = #JGI_NO:INTEGER#
)
SELECT
  ORADPX01.SEQ_DPS_I_INS_DOC_PLAN.NEXTVAL,
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.INS_NO,
  T1.MAIN_INS_NO,
  T1.DOC_NO,
  T1.EXCEPT_DIST_INS_FLG,
  T1.DEL_INS_FLG,
  T1.NON_PATIENT_CNT,
  T1.TOT_PATIENT_CNT,
  T1.TKD_PATIENT_CNT,
  T1.CURRENT_PERIOD,
  T1.ADVANCE_PERIOD,
  T1.THEORETICAL_INC_VALUE_Y,
  T1.PLANNED_INC_VALUE_Y,
  T1.THEORETICAL_VALUE_Y,
  T1.PLANNED_VALUE_Y,
  NULL AS PLANNED_VALUE_T,
  T1.IS_JGI_NO,
  T1.IS_JGI_NAME,
  T1.IS_DATE,
  T1.UP_JGI_NO,
  T1.UP_JGI_NAME,
  T1.UP_DATE
FROM
  DPS_I_ID_HBN_RESULT_TMP T1
    INNER JOIN TGT_HNMK_INS_TYPE T2 ON T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE
      INNER JOIN DPS_C_INS_MST_ALL T3 ON T1.INS_NO = T3.INS_NO
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND PLANNED_VALUE_Y IS NOT NULL
]]>
</insert>

<insert id="insertINS_DOC_PLAN_FOR_MALL" parameterClass="java.util.Map">
<![CDATA[
INSERT INTO DPS_I_INS_DOC_PLAN
(
  SEQ_KEY,
  JGI_NO,
  PROD_CODE,
  INS_NO,
  MAIN_INS_NO,
  DOC_NO,
  EXCEPT_DIST_INS_FLG,
  DEL_INS_FLG,
  NON_PATIENT_CNT,
  TOT_PATIENT_CNT,
  TKD_PATIENT_CNT,
  CURRENT_PERIOD,
  ADVANCE_PERIOD,
  THEORETICAL_INC_VALUE_Y,
  PLANNED_INC_VALUE_Y,
  THEORETICAL_VALUE_Y,
  PLANNED_VALUE_Y,
  PLANNED_VALUE_T,
  IS_JGI_NO,
  IS_JGI_NAME,
  IS_DATE,
  UP_JGI_NO,
  UP_JGI_NAME,
  UP_DATE
)
WITH
TGT_HNMK_INS_TYPE AS (
SELECT
  PROD_CODE,
  '1' AS INS_TYPE
FROM
  DPS_I_MR_PLAN
WHERE
  JGI_NO = #JGI_NO:INTEGER#
UNION
SELECT
  PROD_CODE,
  '2' AS INS_TYPE
FROM
  DPS_I_MR_PLAN
WHERE
  JGI_NO = #JGI_NO:INTEGER#
),
OYAGAMALL_HONIN_DUMMY_INS AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  T1.INS_NO,
  T1.RELN_INS_NO
FROM
  DPS_I_ID_HBN_RESULT_TMP T1
    INNER JOIN DPS_C_INS_MST_ALL T2 ON T1.INS_NO = T2.INS_NO
      INNER JOIN TGT_HNMK_INS_TYPE T3 ON T1.PROD_CODE = T3.PROD_CODE AND T1.INS_TYPE = T3.INS_TYPE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
  AND T1.PLANNED_VALUE_Y IS NOT NULL
  AND T1.DOC_NO = 'DDDDDD'
  AND T1.MAIN_INS_NO IN (SELECT DISTINCT INS_NO FROM DPS_C_INS_MST_ALL WHERE INS_CLASS = '06' AND OLD_INSR_FLG = '3')
  AND T2.INS_CLASS <> '02'
)
SELECT
  ORADPX01.SEQ_DPS_I_INS_DOC_PLAN.NEXTVAL,
  T2.JGI_NO,
  T2.PROD_CODE,
  T1.INS_NO,
  T1.MAIN_INS_NO,
  'DDDDDD' AS DOC_NO,
  '0' AS EXCEPT_DIST_INS_FLG,
  '0' AS DEL_INS_FLG,
  NULL AS NON_PATIENT_CNT,
  NULL AS TOT_PATIENT_CNT,
  NULL AS TKD_PATIENT_CNT,
  NULL AS CURRENT_PERIOD,
  NULL AS ADVANCE_PERIOD,
  NULL AS THEORETICAL_INC_VALUE_Y,
  NULL AS PLANNED_INC_VALUE_Y,
  NULL AS THEORETICAL_VALUE_Y,
  0 AS PLANNED_VALUE_Y,
  NULL AS PLANNED_VALUE_T,
  #EXEC_JGI_NO:INTEGER# AS IS_JGI_NO,
  #EXEC_JGI_NAME:VARCHAR# AS IS_JGI_NAME,
  SYSTIMESTAMP AS IS_DATE,
  #EXEC_JGI_NO:INTEGER# AS UP_JGI_NO,
  #EXEC_JGI_NAME:VARCHAR# AS UP_JGI_NAME,
  SYSTIMESTAMP AS UP_DATE
FROM
  DPS_C_INS_MST_ALL T1
    INNER JOIN OYAGAMALL_HONIN_DUMMY_INS T2 ON T1.RELN_INS_NO = T2.RELN_INS_NO AND T1.INS_NO <> T2.INS_NO
WHERE
  T1.INS_CLASS <> '02'
  AND NOT (T1.INS_CLASS = '06' AND T1.OLD_INSR_FLG = '3')
  AND NOT EXISTS (
    SELECT 1 FROM DPS_I_EXCEPT_DIST_INS EDI WHERE T1.INS_NO = EDI.INS_NO AND (EDI.PROD_CODE IS NULL OR T2.PROD_CODE = EDI.PROD_CODE)
  )
]]>
</insert>

<update id="updateINS_DOC_PLAN_MINUS_PLAN" parameterClass="java.util.Map">
<![CDATA[
UPDATE DPS_I_INS_DOC_PLAN
SET
  THEORETICAL_VALUE_Y =
    CASE
      WHEN THEORETICAL_VALUE_Y IS NULL THEN NULL
      ELSE CASE
        WHEN THEORETICAL_VALUE_Y < 0 THEN 0
        ELSE THEORETICAL_VALUE_Y
      END
    END,
  PLANNED_VALUE_Y =
    CASE
      WHEN PLANNED_VALUE_Y IS NULL THEN NULL
      ELSE CASE
        WHEN PLANNED_VALUE_Y < 0 THEN 0
        ELSE PLANNED_VALUE_Y
      END
    END,
  UP_DATE = SYSTIMESTAMP
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND (THEORETICAL_VALUE_Y < 0 OR PLANNED_VALUE_Y < 0)
]]>
</update>

<delete id="deleteINS_PLAN"  parameterClass="java.util.Map">
DELETE FROM DPS_I_INS_PLAN WHERE JGI_NO = #JGI_NO:INTEGER#
</delete>

<insert id="insertINS_PLAN" parameterClass="java.util.Map">
<![CDATA[
INSERT INTO DPS_I_INS_PLAN
(
  SEQ_KEY,
  JGI_NO,
  PROD_CODE,
  INS_NO,
  ADVANCE_PERIOD,
  THEORETICAL_INC_VALUE_Y,
  PLANNED_INC_VALUE_Y,
  THEORETICAL_VALUE_Y,
  PLANNED_VALUE_Y,
  PLANNED_VALUE_T,
  IS_JGI_NO,
  IS_JGI_NAME,
  IS_DATE,
  UP_JGI_NO,
  UP_JGI_NAME,
  UP_DATE
)
SELECT
  ORADPX01.SEQ_DPS_I_INS_PLAN.NEXTVAL AS SEQ_KEY,
  T.*
FROM
(
SELECT
  JGI_NO,
  PROD_CODE,
  MAIN_INS_NO AS INS_NO,
  NVL(SUM(ADVANCE_PERIOD),0) AS ADVANCE_PERIOD,
  NVL(SUM(THEORETICAL_INC_VALUE_Y),0) AS THEORETICAL_INC_VALUE_Y,
  NVL(SUM(NVL(PLANNED_INC_VALUE_Y,THEORETICAL_INC_VALUE_Y)),0) AS PLANNED_INC_VALUE_Y,
  NVL(SUM(THEORETICAL_VALUE_Y),0) AS THEORETICAL_VALUE_Y,
  NVL(SUM(PLANNED_VALUE_Y),0) AS PLANNED_VALUE_Y,
  NULL AS PLANNED_VALUE_T,
  #EXEC_JGI_NO:INTEGER# AS IS_JGI_NO,
  #EXEC_JGI_NAME:VARCHAR# AS IS_JGI_NAME,
  SYSTIMESTAMP AS IS_DATE,
  #EXEC_JGI_NO:INTEGER# AS UP_JGI_NO,
  #EXEC_JGI_NAME:VARCHAR# AS UP_JGI_NAME,
  SYSTIMESTAMP AS UP_DATE
FROM
  DPS_I_INS_DOC_PLAN
WHERE
  JGI_NO = #JGI_NO:INTEGER#
  AND PLANNED_VALUE_Y IS NOT NULL
GROUP BY
  JGI_NO, PROD_CODE, MAIN_INS_NO
) T
]]>
</insert>

<select id="selectDistMiss" resultMap="resultMapList" parameterClass="java.util.Map">
<![CDATA[
WITH
TGT_HNMK AS (
SELECT
 T1.F_PROD_CODE AS PROD_CODE
FROM
 DPS_I_FAMILY_PROD T1
 INNER JOIN (SELECT F_PROD_CODE FROM DPS_I_FAMILY_PROD GROUP BY F_PROD_CODE) T2 ON T1.PROD_CODE = T2.F_PROD_CODE
),
MR_PLAN_TBL AS (
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  '1' AS INS_TYPE,
  T1.PLANNED_VALUE_UH_Y AS PLAN_VAL
FROM
  DPS_I_MR_PLAN T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
UNION
SELECT
  T1.JGI_NO,
  T1.PROD_CODE,
  '2' AS INS_TYPE,
  T1.PLANNED_VALUE_P_Y AS PLAN_VAL
FROM
  DPS_I_MR_PLAN T1
    INNER JOIN TGT_HNMK T2 ON T1.PROD_CODE = T2.PROD_CODE
WHERE
  T1.JGI_NO = #JGI_NO:INTEGER#
),
INSDOC_SUM_TBL AS (
SELECT
  JGI_NO,
  PROD_CODE,
  INS_TYPE,
  SUM(NVL(PLANNED_VALUE_Y, 0)) AS PLANNED_VALUE_SUM
FROM
  (
  SELECT
    T1.*,
    CASE
      WHEN T2.HO_INS_TYPE = '1' THEN '1'
      WHEN T2.HO_INS_TYPE = '2' THEN '1'
      WHEN T2.HO_INS_TYPE = '3' THEN '2'
    END AS INS_TYPE
  FROM
    DPS_I_INS_DOC_PLAN T1
      INNER JOIN DPS_C_INS_MST_ALL T2 ON T1.INS_NO = T2.INS_NO
  )
WHERE
  JGI_NO = #JGI_NO:INTEGER#
GROUP BY
  JGI_NO, PROD_CODE, INS_TYPE
)
SELECT
  #SOS_CD3:VARCHAR# AS SOS_CD,
  #JGI_NO:INTEGER# AS JGI_NO,
  T.*
FROM
(
  SELECT
    T1.PROD_CODE,
    T1.INS_TYPE,
    T1.PLAN_VAL AS PLANNED_VALUE,
    (T1.PLAN_VAL - NVL(T2.PLANNED_VALUE_SUM, 0)) AS DIFF_VALUE,
    'DPS2015W' AS MESSAGE_CODE
  FROM
    MR_PLAN_TBL T1
      LEFT OUTER JOIN INSDOC_SUM_TBL T2 ON T1.JGI_NO = T2.JGI_NO AND T1.PROD_CODE = T2.PROD_CODE AND T1.INS_TYPE = T2.INS_TYPE
) T
WHERE
  DIFF_VALUE <> 0
]]>
</select>
</sqlMap>